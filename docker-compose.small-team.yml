version: '3.8'

# Optimized Docker Compose for Small Teams (5-15 developers)
# Reduced resource usage while maintaining core functionality

services:
  # PostgreSQL Database - Single instance, optimized for small workload
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-bugbase}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password required}
      POSTGRES_DB: ${DB_NAME:-bugbase}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-bugbase}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    command: >
      postgres -c max_connections=50
               -c shared_buffers=128MB
               -c effective_cache_size=256MB
               -c maintenance_work_mem=32MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=8MB
               -c default_statistics_target=100

  # Redis Cache - Lightweight configuration
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:?Redis password required} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Backend API - Single instance for small teams
  backend:
    image: ${DOCKER_REGISTRY:-}bugbase-backend:${VERSION:-latest}
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER:-bugbase}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-bugbase}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET:?JWT secret required}
      SESSION_SECRET: ${SESSION_SECRET:?Session secret required}
      PASSWORD_PEPPER: ${PASSWORD_PEPPER:?Password pepper required}
      COOKIE_SECRET: ${COOKIE_SECRET:?Cookie secret required}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://bugbase.example.com}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM:-noreply@bugbase.example.com}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      ENABLE_METRICS: "false"
      MAX_FILE_SIZE: 5242880  # 5MB limit for small teams
    volumes:
      - uploads:/app/uploads
      - ./logs/backend:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Frontend Nginx - Single instance
  frontend:
    image: ${DOCKER_REGISTRY:-}bugbase-frontend:${VERSION:-latest}
    restart: always
    environment:
      - API_URL=http://backend:3000
    ports:
      - "80:8080"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 3
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # Nginx Load Balancer / SSL Termination
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "443:443"
    volumes:
      - ./nginx-lb-small.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 64M

  # Basic Monitoring - Lightweight Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'  # Reduced retention
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus-small.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    profiles: ["monitoring"]  # Optional service
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Simple backup service - runs weekly instead of daily
  backup:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${DB_USER:-bugbase}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-bugbase}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * 0}  # Weekly on Sunday
      S3_BUCKET: ${S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./scripts/backup-small.sh:/backup.sh:ro
      - backup_temp:/backup
    command: crond -f -d 8
    networks:
      - backend
    profiles: ["backup"]  # Optional service
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true
  monitoring:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  prometheus_data:
    driver: local
  backup_temp:
    driver: local